const fetch = require('node-fetch');

const BASE_URL = 'https://neo-osi-backend.onrender.com';

// –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏
const TEST_CREDENTIALS = {
  email: 'test@example.com', // –∏–ª–∏ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π email
  password: 'password123'    // –∏–ª–∏ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
};

async function login() {
  try {
    console.log('üîê –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const response = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(TEST_CREDENTIALS)
    });
    
    const data = await response.json();
    console.log('üìä –°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞:', response.status);
    
    if (!response.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data);
      return null;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω!');
    return data.accessToken;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
    return null;
  }
}

async function testChat(token) {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º /ai/chat –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...');
  
  try {
    const response = await fetch(`${BASE_URL}/ai/chat`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ prompt: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?' })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
    const data = await response.json();
    console.log('üìÑ –û—Ç–≤–µ—Ç —á–∞—Ç–∞:', JSON.stringify(data, null, 2));
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞:', error.message);
  }
}

async function testDocuments(token) {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º /ai/documents –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...');
  
  try {
    const response = await fetch(`${BASE_URL}/ai/documents`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ prompt: '–°–æ–∑–¥–∞–π –∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç' })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('üìÑ Content-Type:', response.headers.get('content-type'));
    
    if (response.headers.get('content-type')?.includes('application/json')) {
      const data = await response.json();
      console.log('üìÑ JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));
    } else {
      console.log('üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error.message);
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Neo OSI Backend –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...');
  console.log('üåê URL:', BASE_URL);
  
  const token = await login();
  if (!token) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ credentials.');
    return;
  }
  
  await testChat(token);
  await testDocuments(token);
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main().catch(console.error);
